#!/bin/bash

UNDERLINE=`tput smul` 
NOUNDERLINE=`tput rmul`
BOLD=`tput bold`
NORMAL=`tput sgr0`

PURPLE_FORE='\033[0;35m' 
LIGHT_PURPLE_FORE='\033[1;35m' 
BLUE_FORE='\033[0;34m'
LIGHT_BLUE_FORE='\033[1;34m'
CYAN_FORE='\033[0;36m'
LIGHT_CYAN_FORE='\033[1;36m'
GREEN_FORE='\033[0;32m'
LIGHT_GREEN_FORE='\033[1;32m'
ORANGE_FORE='\033[0;33m' 
LIGHT_ORANGE_FORE='\033[1;33m' 
RED_FORE='\033[0;31m'
LIGHT_RED_FORE='\033[1;31m'
DARK_GRAY_FORE='\033[1;30m'

NC='\033[0m' # No color

LIGHT_BLUE_BACK='\033[1;44m'
BLUE_BACK='\033[0;44m'
LIGHT_RED_BACK='\033[1;41m'
RED_BACK='\033[0;41m'

exitSIGINT () {
	kill "$pidChild" 2> /dev/null
	exit 0
}

trap exitSIGINT SIGINT

printFrontend () {
	#Get the data
	IFS=$'\n' read -a alarmsMessagesArray -d '' <<< "$(cat ~/bin/alarmData)"

	#To know the size of the terminal
	local columns="$(tput cols)"
	local lines="$(tput lines)"

	clear

	#Print headers
	local columnsMessage="$((columns-(2+28+4+5+7+10)))"
	local separator="$(eval "for i in {1..${columns}}; do printf %s -; done")"
	local rows="%-2d| %-28s| %-4d| %-5d| %-7d| %-${columnsMessage}.${columnsMessage}s\n"
	local tableWidth="$(tput cols)"
	spaces="$(eval "for i in {1..${columns}}; do printf "%1s" " "; done")"

	printf "\n" ""
	printf "${BOLD}%-2s| %-28s| %-20s| %-24s${NORMAL}\n" Id Date Remain Message
	printf "${BOLD}%${tableWidth}s${NORMAL}\n" "$separator"
	printf "${BOLD}%-32s| %-4s| %-5s| %-7s| %-24s${NORMAL}\n" "" "Days" "Hours" "Minutes" ""
	printf "${BOLD}%${tableWidth}s${NORMAL}\n" "$separator"

	unset idsArray
	local id=1

	local COLOR

	#Print alarms
	for alarmMessage in "${alarmsMessagesArray[@]}"; do
		local secondsCurrent="$(date +%s)"
		local secondsGoal="$(echo "$alarmMessage" | cut -f 1 -d '^')"
		local message="$(echo "$alarmMessage" | cut -f 2 -d '^')"

		local minutesTotalLeft=$(((secondsGoal - secondsCurrent)/60))

		local daysLeft=$((minutesTotalLeft/60/24))
		local hoursLeft=$((minutesTotalLeft/60 - $daysLeft * 24))
		local minutesLeft=$((minutesTotalLeft - $daysLeft * 24 * 60 - $hoursLeft * 60))

		idsArray+=($id)

		if [[ "$daysLeft" -ge 30 ]]; then
			COLOR=${PURPLE_FORE} 
		elif [[ "$daysLeft" -ge 14 ]]; then
			COLOR=${LIGHT_PURPLE_FORE} 
		elif [[ "$daysLeft" -ge 7 ]]; then
			COLOR=${BLUE_FORE} 
		elif [[ "$daysLeft" -ge 3 ]]; then
			COLOR=${LIGHT_BLUE_FORE} 
		elif [[ "$daysLeft" -ge 1 ]]; then
			COLOR=${CYAN_FORE}
		elif [[ "$hoursLeft" -ge 12 ]]; then
			COLOR=${LIGHT_CYAN_FORE}
		elif [[ "$hoursLeft" -ge 6 ]]; then
			COLOR=${GREEN_FORE}
		elif [[ "$hoursLeft" -ge 3 ]]; then
			COLOR=${LIGHT_GREEN_FORE}
		elif [[ "$hoursLeft" -ge 1 ]]; then
			COLOR=${ORANGE_FORE}
		elif [[ "$minutesLeft" -ge 30 ]]; then
			COLOR=${LIGHT_ORANGE_FORE}
		elif [[ "$minutesLeft" -ge 15 ]]; then
			COLOR=${RED_FORE}
		elif [[ "$minutesLeft" -ge 0 ]]; then
			COLOR=${LIGHT_RED_FORE}
		else 
			COLOR=${DARK_GRAY_FORE}
		fi

		printf "${COLOR}$rows${NC}" "$id" "$(date --date="@$secondsGoal" +%c)" "$daysLeft" "$hoursLeft" "$minutesLeft" "$message"

		id=$((id + 1))

	done

	#Print options
	local columnsOptions="$(echo $(((columns-(17+15+15+13))/3)))"
	local numberNewLinesOptions="$((lines-(7+${#alarmsMessagesArray[@]})))"

	local newLinesOptions

	if [[ "$numberNewLinesOptions" -le 0 ]]; then
		newLinesOptions=""
	else
		newLinesOptions="$(eval "for i in {1..${numberNewLinesOptions}}; do printf "\\\\\\\\n" ""; done")"
	fi

	printf "$newLinesOptions${BOLD}%-$((17+columnsOptions))s%-$((15+columnsOptions))s%-$((15+columnsOptions))s%-13s${NORMAL}\n" "1. Schedule alarm" "2. Delete alarm" "3. Modify alarm" "4. Stop alarm"

}

askDate () {
	echo -en "${BLUE_BACK}$spaces\r${NC}"
	read -p "$(echo -en "${LIGHT_BLUE_BACK}What year, month, day, hour and minutes? (24 hour format) ${BLUE_BACK}")" year month day hour minutes 
	echo -en "${NC}\033[T\033[2K\033[3J\r"
	secondsGoal=$(date --date="$year-$month-$day $hour:$minutes" +%s 2> /dev/null)
	secondsCurrent="$(date +%s)"
	while [[ "$secondsGoal" -lt "$secondsCurrent" || ! "$year" =~ ^[0-9]+$ || ! "$month" =~ ^[0-9]+$ || ! "$day" =~ ^[0-9]+$ || ! "$hour" =~ ^[0-9]+$ || ! "$minutes" =~ ^[0-9]+$ ]]; do
		if [[ ! "$year" =~ ^[0-9]+$ || ! "$month" =~ ^[0-9]+$ || ! "$day" =~ ^[0-9]+$ || ! "$hour" =~ ^[0-9]+$ || ! "$minutes" =~ ^[0-9]+$ ]]; then
			echo -en "${RED_BACK}$spaces\r${NC}"
			echo -en "${LIGHT_RED_BACK}Invalid entry${NC}"
			sleep 3
			echo -en "\033[2K\r"
		else 
			echo -en "${RED_BACK}$spaces\r${NC}"
			echo -en "${LIGHT_RED_BACK}That date has passed ${NC}"
			sleep 3
			echo -en "\033[2K\r"
		fi
		echo -en "${BLUE_BACK}$spaces\r${NC}"
		read -p "$(echo -en "${LIGHT_BLUE_BACK}What year, month, day, hour and minutes? (24 hour format) ${BLUE_BACK}")" year month day hour minutes 
		echo -en "${NC}\033[T\033[2K\033[3J\r"
		secondsGoal=$(date --date="$year-$month-$day $hour:$minutes" +%s 2> /dev/null)
		secondsCurrent="$(date +%s)"
	done
}

askMessage () {
	message=""
	while [[ ! "$message" =~ ^.{5,}$ ]]; do
		echo -en "${BLUE_BACK}$spaces\r${NC}"
		read -p "$(echo -en "${LIGHT_BLUE_BACK}What message? ${BLUE_BACK}")" message
		echo -en "${NC}\033[T\033[2K\033[3J\r"
		if [[ "$message" =~ \^ ]]; then
			message=""	
			echo -en "${RED_BACK}$spaces\r${NC}"
			echo -en "${LIGHT_RED_BACK}Can't insert ^${NC}"
			sleep 3
			echo -en "\033[2K\r"
		fi
	done
}

askId () {
	echo -en "${BLUE_BACK}$spaces\r${NC}"
	read -p "$(echo -en "${LIGHT_BLUE_BACK}What is the id of the task you want to $1? ${BLUE_BACK}")" id
	echo -en "${NC}\033[T\033[2K\033[3J\r"
	correctId=false
	if [[ "$id" =~ ^[0-9]+$ ]]; then
		for idElement in "${idsArray[@]}"; do
			if [[ "$id" -eq "$idElement" ]]; then
				correctId=true
			fi
		done
	fi
	while ! $correctId; do
		if [[ ! "$id" =~ ^[0-9]+$ ]]; then
			echo -en "${RED_BACK}$spaces\r${NC}"
			echo -en "${LIGHT_RED_BACK}Invalid entry${NC}"
			sleep 3
			echo -en "\033[2K\r"
		elif [[ "$id" =~ ^[0-9]+$ ]]; then
			echo -en "${RED_BACK}$spaces\r${NC}"
			echo -en "${LIGHT_RED_BACK}Id doesn't exist ${NC}"
			sleep 3
			echo -en "\033[2K\r"
		fi
		echo -en "${BLUE_BACK}$spaces\r${NC}"
		read -p "$(echo -en "${LIGHT_BLUE_BACK}What is the id of the task you want to $1? ${BLUE_BACK}")" id
		echo -en "${NC}\033[T\033[2K\033[3J\r"
		if [[ "$id" =~ ^[0-9]+$ ]]; then
			for idElement in "${idsArray[@]}"; do
				if [[ "$id" -eq "$idElement" ]]; then
					correctId=true
				fi
			done
		fi
	done
}

alarmChild &

pidChild=$! 

while true; do
	read -N 1 selection

	if [[ selection -eq 1 ]]; then
		printFrontend
		if [[ -e ~/tmp/alarmPipe ]]; then
			echo -en "${RED_BACK}$spaces\r${NC}"
			echo -en "${LIGHT_RED_BACK}You need to stop the alarm ${NC}"
			sleep 3
			echo -en "\033[2K\r"
			printf "${BLUE_BACK}$spaces\r${NC}"
			printf "${LIGHT_BLUE_BACK}%-24s${NC}" "Enter selection [1-4] > "
		else
			kill "$pidChild"
			askDate
			askMessage
			sortedAlarmData="$({ cat ~/bin/alarmData; echo "${secondsGoal}^${message}"; } | sort -n -t '^' -k 1)" 
			echo "$sortedAlarmData" > ~/bin/alarmData
			alarmChild &
			pidChild=$!
		fi
	elif [[ selection -eq 2 ]]; then
		printFrontend
		if [[ -e ~/tmp/alarmPipe ]]; then
			echo -en "${RED_BACK}$spaces\r${NC}"
			echo -en "${LIGHT_RED_BACK}You need to stop the alarm ${NC}"
			sleep 3
			echo -en "\033[2K\r"
			printf "${BLUE_BACK}$spaces\r${NC}"
			printf "${LIGHT_BLUE_BACK}%-24s${NC}" "Enter selection [1-4] > "
		else
			kill "$pidChild"
			askId delete
			sed -i "${id}s/.*//" ~/bin/alarmData
			perl -p -i -e 's/^\n$//g' ~/bin/alarmData
			alarmChild &
			pidChild=$!
		fi
	elif [[ selection -eq 3 ]]; then
		printFrontend
		if [[ -e ~/tmp/alarmPipe ]]; then
			echo -en "${RED_BACK}$spaces\r${NC}"
			echo -en "${LIGHT_RED_BACK}You need to stop the alarm ${NC}"
			sleep 3
			echo -en "\033[2K\r"
			printf "${BLUE_BACK}$spaces\r${NC}"
			printf "${LIGHT_BLUE_BACK}%-24s${NC}" "Enter selection [1-4] > "
		else
			kill "$pidChild"
			askId modify
			while true; do
				echo -en "${BLUE_BACK}$spaces\r${NC}"
				read -p "$(echo -en "${LIGHT_BLUE_BACK}What do you want to modify? (date/message) ${BLUE_BACK}")" answer
				echo -en "${NC}\033[T\033[2K\033[3J\r"
				if [[ "$answer" == date ]]; then
					askDate
					sed -i "${id}s/[0-9]\+/$secondsGoal/" ~/bin/alarmData
					sortedAlarmData="$(cat ~/bin/alarmData | sort -n -t '^' -k 1)"
					echo "$sortedAlarmData" > ~/bin/alarmData
					break
				elif [[ "$answer" == message ]]; then
					askMessage
					sed -i "${id}s/\^.\+/^$message/" ~/bin/alarmData
					break
				else
					echo -en "${RED_BACK}$spaces\r${NC}"
					echo -en "${LIGHT_RED_BACK}Invalid entry${NC}"
					sleep 3
					echo -en "\033[2K\r"
				fi
			done
			alarmChild &
			pidChild=$!
		fi
	elif [[ selection -eq 4 ]]; then
		pidMusic="$(cat < ~/tmp/alarmPipe)"
		kill "$pidMusic"
		printFrontend
		#Print status line
		printf "${BLUE_BACK}$spaces\r${NC}"
		printf "${LIGHT_BLUE_BACK}%-24s${NC}" "Enter selection [1-4] > "
	fi
done
