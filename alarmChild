#!/bin/bash

# It is neccesary acpid

if [[ "$(ps aux | grep -P acpi_listen | grep -Pv 'grep')" == "" ]]; then
	systemctl start acpid.service
	acpi_listen | grep -Pi 'headphone' > ~/tmp/headphonesStatus &
fi

playMusic () {
	if [[ "$(cat ~/tmp/headphonesStatus | tail -n 1 | grep -P 'unplug')" != "" ]]; then
		mpv ~/Música/bash/alarm.mp3 &> /dev/null &
	else
		mpv --volume 50 ~/Música/bash/alarm.mp3 &> /dev/null &
	fi
}

UNDERLINE=`tput smul` 
NOUNDERLINE=`tput rmul`
BOLD=`tput bold`
NORMAL=`tput sgr0`

PURPLE_FORE='\033[0;35m' 
LIGHT_PURPLE_FORE='\033[1;35m' 
BLUE_FORE='\033[0;34m'
LIGHT_BLUE_FORE='\033[1;34m'
CYAN_FORE='\033[0;36m'
LIGHT_CYAN_FORE='\033[1;36m'
GREEN_FORE='\033[0;32m'
LIGHT_GREEN_FORE='\033[1;32m'
ORANGE_FORE='\033[0;33m' 
LIGHT_ORANGE_FORE='\033[1;33m' 
RED_FORE='\033[0;31m'
LIGHT_RED_FORE='\033[1;31m'
DARK_GRAY_FORE='\033[1;30m'

NC='\033[0m' # No color

LIGHT_BLUE_BACK='\033[1;44m'
BLUE_BACK='\033[0;44m'
LIGHT_RED_BACK='\033[1;41m'
RED_BACK='\033[0;41m'

#Get the data
IFS=$'\n' read -a alarmsMessagesArray -d '' <<< "$(cat ~/bin/alarmData)"

#To know the size of the terminal
columns="$(tput cols)"
lines="$(tput lines)"

while true; do

	clear

	#Print headers
	columnsMessage="$((columns-(2+28+4+5+7+10)))"
	separator="$(eval "for i in {1..${columns}}; do printf %s -; done")"
	rows="%-2d| %-28s| %-4d| %-5d| %-7d| %-${columnsMessage}.${columnsMessage}s\n"
	tableWidth="$(tput cols)"
	spaces="$(eval "for i in {1..${columns}}; do printf "%1s" " "; done")"

	printf "\n" ""
	printf "${BOLD}%-2s| %-28s| %-20s| %-24s${NORMAL}\n" Id Date Remain Message
	printf "${BOLD}%${tableWidth}s${NORMAL}\n" "$separator"
	printf "${BOLD}%-32s| %-4s| %-5s| %-7s| %-24s${NORMAL}\n" "" "Days" "Hours" "Minutes" ""
	printf "${BOLD}%${tableWidth}s${NORMAL}\n" "$separator"

	id=1

	#Print alarms
	for alarmMessage in "${alarmsMessagesArray[@]}"; do
		secondsCurrent="$(date +%s)"
		secondsGoal="$(echo "$alarmMessage" | cut -f 1 -d '^')"
		message="$(echo "$alarmMessage" | cut -f 2 -d '^')"

		minutesTotalLeft=$(((secondsGoal - secondsCurrent)/60))

		daysLeft=$((minutesTotalLeft/60/24))
		hoursLeft=$((minutesTotalLeft/60 - $daysLeft * 24))
		minutesLeft=$((minutesTotalLeft - $daysLeft * 24 * 60 - $hoursLeft * 60))

		if [[ "$daysLeft" -ge 30 ]]; then
			COLOR=${PURPLE_FORE} 
		elif [[ "$daysLeft" -ge 14 ]]; then
			COLOR=${LIGHT_PURPLE_FORE} 
		elif [[ "$daysLeft" -ge 7 ]]; then
			COLOR=${BLUE_FORE} 
		elif [[ "$daysLeft" -ge 3 ]]; then
			COLOR=${LIGHT_BLUE_FORE} 
		elif [[ "$daysLeft" -ge 1 ]]; then
			COLOR=${CYAN_FORE}
		elif [[ "$hoursLeft" -ge 12 ]]; then
			COLOR=${LIGHT_CYAN_FORE}
		elif [[ "$hoursLeft" -ge 6 ]]; then
			COLOR=${GREEN_FORE}
		elif [[ "$hoursLeft" -ge 3 ]]; then
			COLOR=${LIGHT_GREEN_FORE}
		elif [[ "$hoursLeft" -ge 1 ]]; then
			COLOR=${ORANGE_FORE}
		elif [[ "$minutesLeft" -ge 30 ]]; then
			COLOR=${LIGHT_ORANGE_FORE}
		elif [[ "$minutesLeft" -ge 15 ]]; then
			COLOR=${RED_FORE}
		elif [[ "$minutesLeft" -ge 0 ]]; then
			COLOR=${LIGHT_RED_FORE}
		else 
			COLOR=${DARK_GRAY_FORE}
		fi

		printf "${COLOR}$rows${NC}" "$id" "$(date --date="@$secondsGoal" +%c)" "$daysLeft" "$hoursLeft" "$minutesLeft" "$message"

		id=$((id + 1))

	done

	#Print options
	columnsOptions="$(echo $(((columns-(17+15+15+13))/3)))"
	numberNewLinesOptions="$((lines-(7+${#alarmsMessagesArray[@]})))"
	if [[ "$numberNewLinesOptions" -le 0 ]]; then
		newLinesOptions=""
	else
		newLinesOptions="$(eval "for i in {1..${numberNewLinesOptions}}; do printf "\\\\\\\\n" ""; done")"
	fi

	printf "$newLinesOptions${BOLD}%-$((17+columnsOptions))s%-$((15+columnsOptions))s%-$((15+columnsOptions))s%-13s${NORMAL}\n" "1. Schedule alarm" "2. Delete alarm" "3. Modify alarm" "4. Stop alarm"

	#Print status line
	printf "${BLUE_BACK}$spaces\r${NC}"
	printf "${LIGHT_BLUE_BACK}%-24s${NC}" "Enter selection [1-4] > "
		
	#Find out if the first alarm has passed
	secondsCurrent="$(date +%s)"
	secondsGoal="$(echo "${alarmsMessagesArray[0]}" | cut -f 1 -d '^')"

	if [[ "$secondsGoal" -le "$secondsCurrent" && "${#alarmsMessagesArray[@]}" -ne 0 ]]; then
		playMusic
		pidMusic=$!
		if [[ ! -e ~/tmp/alarmPipe ]]; then
			mkfifo ~/tmp/alarmPipe
		fi
		# Wait until alarm receives data of pipe
		echo "$pidMusic" > ~/tmp/alarmPipe
		rm ~/tmp/alarmPipe
	fi

	#Update interval
	secondsCurrent="$(date +%s)"
	secondsGoal="$(echo "${alarmsMessagesArray[0]}" | cut -f 1 -d '^')"

	minutesTotalLeft=$(((secondsGoal - secondsCurrent)/60))

	daysLeft=$((minutesTotalLeft/60/24))
	hoursLeft=$((minutesTotalLeft/60 - $daysLeft * 24))
	minutesLeft=$((minutesTotalLeft - $daysLeft * 24 * 60 - $hoursLeft * 60))

	if [[ "$daysLeft" -ge 30 ]]; then
		interval=7h
	elif [[ "$daysLeft" -ge 14 ]]; then
		interval=6h
	elif [[ "$daysLeft" -ge 7 ]]; then
		interval=5h
	elif [[ "$daysLeft" -ge 3 ]]; then
		interval=4h
	elif [[ "$daysLeft" -ge 1 ]]; then
		interval=3h
	elif [[ "$hoursLeft" -ge 12 ]]; then
		interval=2h
	elif [[ "$hoursLeft" -ge 6 ]]; then
		interval=1h
	elif [[ "$hoursLeft" -ge 3 ]]; then
		interval=30m
	elif [[ "$hoursLeft" -ge 1 ]]; then
		interval=10m
	elif [[ "$minutesLeft" -ge 30 ]]; then
		interval=5m
	elif [[ "$minutesLeft" -ge 15 ]]; then
		interval=3m
	elif [[ "$minutesLeft" -ge 0 ]]; then
		interval=1m
	else 
		interval=30s
	fi

	sleep "$interval"
done
